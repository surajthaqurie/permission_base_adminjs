generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                      String                   @id @unique @default(uuid())
  name                    String
  email                   String                   @unique
  password                String
  role                    Role
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  TwoFactorAuthentication TwoFactorAuthentication?
  ResourcePermission      ResourcePermission[]
}

model Pages {
  id                     String   @id @unique @default(uuid())
  name                   String   @unique
  image                  Json?
  image_alternative_text String?
  description            String
  og_title               String?
  meta_title             String?
  og_description         String?
  meta_description       String?
  keywords               String?
  canonical_link         String?
  og_url                 String?
  og_type                OG_TYPE?
  slug                   String
  sections               Json?
  meta_box               Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Games {
  id                       String           @id @unique @default(uuid())
  name                     String           @unique
  image                    Json?
  image_alternative_text   String?
  description              String
  orders                   Int?
  og_title                 String?
  meta_title               String?
  og_description           String?
  meta_description         String?
  keywords                 String?
  canonical_link           String?
  og_url                   String?
  game_type                String
  og_type                  OG_TYPE?
  slug                     String
  gallery                  Json?
  gallery_alternative_text String?
  youtube_link             String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  GameTypes                GameTypes?       @relation(fields: [game_type], references: [id], onDelete: Cascade)
  GameByCategory           GameByCategory[]
}

model GameTypes {
  id                     String   @id @unique @default(uuid())
  image                  Json?
  image_alternative_text String?
  description            String
  orders                 Int?
  meta_title             String?
  keywords               String?
  meta_description       String?
  slug                   String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  name                   String   @unique
  Games                  Games[]
}

model GameCategory {
  id             String           @id @unique @default(uuid())
  name           String           @unique
  slug           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  GameByCategory GameByCategory[]
}

model GameByCategory {
  id           String       @id @unique @default(uuid())
  gameId       String
  categoryId   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  GameCategory GameCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Game         Games        @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Settings {
  id        String   @id @unique @default(uuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id                     String      @id @unique @default(uuid())
  title                  String
  description            String
  image                  Json?
  image_alternative_text String?
  FAQCategoryId          String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  FAQCategory            FAQCategory @relation(fields: [FAQCategoryId], references: [id])
}

model FAQCategory {
  id                     String   @id @unique @default(uuid())
  title                  String
  description            String
  image                  Json?
  image_alternative_text String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  FAQ                    FAQ[]
}

model TwoFactorAuthentication {
  id        String   @id @unique @default(uuid())
  secret    String
  status    Boolean  @default(false)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResourcePermission {
  id            String   @id @unique @default(uuid())
  resource_name String
  read          Boolean? @default(false)
  write         Boolean? @default(false)
  update        Boolean? @default(false)
  delete        Boolean? @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user_id String
  User    Users  @relation(fields: [user_id], references: [id])
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum OG_TYPE {
  WEBSITE
  MOBILE
}

enum Role {
  ADMIN
  EDITOR
  SEO
}
